{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/code/driver-connect/app/api/drivers/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nconst BACKEND_URL = 'http://localhost:5000';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const response = await fetch(`${BACKEND_URL}/drivers`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch drivers from backend');\n    }\n    \n    const drivers = await response.json();\n    \n    // Transform backend data to match frontend expectations\n    const transformedDrivers = drivers.map((driver: any) => ({\n      id: driver.id.toString(),\n      user: {\n        name: driver.name,\n        email: driver.email,\n        phone: driver.phone\n      },\n      experience: driver.experience,\n      location: driver.location,\n      state: driver.location?.split(', ')[1] || driver.location,\n      city: driver.location?.split(', ')[0] || driver.location,\n      rating: driver.rating ? parseFloat(driver.rating) : 4.5,\n      totalReviews: parseInt(driver.review_count) || 0,\n      totalJobs: driver.total_jobs || 0,\n      completedJobs: driver.total_jobs || 0,\n      isAvailable: driver.availability_status === 'available',\n      vehicleTypes: Array.isArray(driver.vehicle_types) ? driver.vehicle_types : [],\n      bio: driver.bio || 'Professional driver with extensive experience.'\n    }));\n    \n    return NextResponse.json(transformedDrivers);\n  } catch (error) {\n    console.error('Error fetching drivers:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch drivers' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,cAAc;AAEb,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,YAAY,QAAQ,CAAC;QAErD,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,wDAAwD;QACxD,MAAM,qBAAqB,QAAQ,GAAG,CAAC,CAAC,SAAgB,CAAC;gBACvD,IAAI,OAAO,EAAE,CAAC,QAAQ;gBACtB,MAAM;oBACJ,MAAM,OAAO,IAAI;oBACjB,OAAO,OAAO,KAAK;oBACnB,OAAO,OAAO,KAAK;gBACrB;gBACA,YAAY,OAAO,UAAU;gBAC7B,UAAU,OAAO,QAAQ;gBACzB,OAAO,OAAO,QAAQ,EAAE,MAAM,KAAK,CAAC,EAAE,IAAI,OAAO,QAAQ;gBACzD,MAAM,OAAO,QAAQ,EAAE,MAAM,KAAK,CAAC,EAAE,IAAI,OAAO,QAAQ;gBACxD,QAAQ,OAAO,MAAM,GAAG,WAAW,OAAO,MAAM,IAAI;gBACpD,cAAc,SAAS,OAAO,YAAY,KAAK;gBAC/C,WAAW,OAAO,UAAU,IAAI;gBAChC,eAAe,OAAO,UAAU,IAAI;gBACpC,aAAa,OAAO,mBAAmB,KAAK;gBAC5C,cAAc,MAAM,OAAO,CAAC,OAAO,aAAa,IAAI,OAAO,aAAa,GAAG,EAAE;gBAC7E,KAAK,OAAO,GAAG,IAAI;YACrB,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}